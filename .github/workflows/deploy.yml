name: 📚 构建与部署文档

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  build_docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      issues: write

    steps:
      # ------------------------
      # 检出代码
      # ------------------------
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ------------------------
      # Node.js 环境
      # ------------------------
      - name: 🧰 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: npm

      # ------------------------
      # 安装依赖
      # ------------------------
      - name: 📦 安装 Node.js 依赖
        run: |
          echo "::group::📦 安装依赖..."
          npm ci
          echo "::endgroup::✅ 依赖安装完成"

      # ------------------------
      # 构建 VuePress
      # ------------------------
      - name: 🏗️ 构建 VuePress 项目
        run: npm run docs:build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ------------------------
      # 构建统计信息
      # ------------------------
      - name: 📊 收集构建统计信息
        id: build_stats
        run: |
          NODE_VER=$(node -v)
          NPM_VER=$(npm -v)
          OS_INFO=$(uname -a)
          CPU_MODEL=$(lscpu | grep "Model name" | sed 's/Model name:\s*//')
          CPU_CORES=$(nproc)
          MEM_TOTAL=$(grep MemTotal /proc/meminfo | awk '{print $2/1024 " MB"}')
          DISK_TOTAL=$(df -h / | awk 'NR==2 {print $2}')

          BUILD_SIZE=$(du -sh docs/.vuepress/dist | cut -f1)
          PAGE_COUNT=$(find docs/.vuepress/dist -type f -name "*.html" | wc -l)

          {
            echo "node_ver=$NODE_VER"
            echo "npm_ver=$NPM_VER"
            echo "os_info=$OS_INFO"
            echo "cpu_model=$CPU_MODEL"
            echo "cpu_cores=$CPU_CORES"
            echo "mem_total=$MEM_TOTAL"
            echo "disk_total=$DISK_TOTAL"
            echo "build_size=$BUILD_SIZE"
            echo "page_count=$PAGE_COUNT"
          } >> "$GITHUB_OUTPUT"

      # ------------------------
      # 多线程死链检测
      # ------------------------
      - name: 🔗 检查文档链接
        id: check_links
        run: |
          echo "::group::🔗 检查文档链接..."
          node .github/workflows/scripts/check-links.js docs/.vuepress/dist 100 true | tee check-links.log
          echo "::endgroup::"
        continue-on-error: true

      # ------------------------
      # 写入构建摘要
      # ------------------------
      - name: 📝 写入构建摘要
        run: |
          cat << 'EOF' >> "$GITHUB_STEP_SUMMARY"
## 🚀 文档构建与部署报告

**完成状态：** ✅ 成功  
**构建时间：** $(date '+%Y-%m-%d %H:%M:%S')  

### 📦 构建产物
- 构建目录大小：${{ steps.build_stats.outputs.build_size }}
- HTML 页面数量：${{ steps.build_stats.outputs.page_count }}

### 🖥️ 构建机器信息
- CPU 型号：${{ steps.build_stats.outputs.cpu_model }}
- CPU 核心数：${{ steps.build_stats.outputs.cpu_cores }}
- 内存总量：${{ steps.build_stats.outputs.mem_total }}
- 磁盘总量：${{ steps.build_stats.outputs.disk_total }}
- 系统信息：${{ steps.build_stats.outputs.os_info }}
- Node.js 版本：${{ steps.build_stats.outputs.node_ver }}
- NPM 版本：${{ steps.build_stats.outputs.npm_ver }}

### 🔍 链接检查结果
EOF
          grep -E "❌|×|\?" check-links.log >> "$GITHUB_STEP_SUMMARY" || echo "✅ 未检测到问题链接"

      # ------------------------
      # 部署到 GitHub Pages
      # ------------------------
      - name: 🚀 部署到 GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/.vuepress/dist
